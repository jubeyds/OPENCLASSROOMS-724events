{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-02-24T12:08:42.137Z",
    "end": "2025-02-24T12:08:42.485Z",
    "duration": 348,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e16ad29e-b9c1-4f4b-bd49-46dfa1768705",
      "title": "",
      "fullFile": "cypress\\e2e\\api-contact.cy.js",
      "file": "cypress\\e2e\\api-contact.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1225c959-bc18-479c-be63-727d631cd343",
          "title": "Test API POST /contact",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Devrait créer un contact et retourner 201 Created",
              "fullTitle": "Test API POST /contact Devrait créer un contact et retourner 201 Created",
              "timedOut": null,
              "duration": 255,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Générer des données aléatoires pour le contact\nconst contactPayload = {\n  name: _faker.faker.person.firstName(),\n  surname: _faker.faker.person.lastName(),\n  email: _faker.faker.internet.email(),\n  message: _faker.faker.lorem.paragraph(),\n  // Ajout du champ contactType requis. \n  // La valeur doit être conforme aux exigences de l'API (exemple: \"client\", \"prospect\", \"partenaire\", etc.)\n  contactType: \"client\"\n};\n// Envoyer la requête POST vers l'endpoint /contact\ncy.request({\n  method: 'POST',\n  url: `${apiBaseUrl}/contact`,\n  body: contactPayload,\n  failOnStatusCode: false // Si vous souhaitez gérer manuellement le code d'erreur dans le test\n}).then(response => {\n  // Vérifier que le status code est 201 (Created)\n  expect(response.status).to.eq(201);\n  // Vous pouvez ajouter d'autres assertions sur le corps de la réponse, par exemple :\n  // expect(response.body).to.have.property('id');\n});",
              "err": {},
              "uuid": "9594249f-8a1c-40a3-b26f-532a22b730f6",
              "parentUUID": "1225c959-bc18-479c-be63-727d631cd343",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9594249f-8a1c-40a3-b26f-532a22b730f6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 255,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}